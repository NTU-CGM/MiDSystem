#!/usr/bin/env php
<?php
if($argc != 5)
{
        echo "Usage: run_muscle_gblocks <orthoMCL config> <fasta file> <output dir> <nucl/prot> 2> /dev/null\n";
        exit;
}

$MUSCLE_PATH = getenv('CONDA_APP_BIN') . '/muscle';
$GBLOCKS_PATH = getenv('NON_CONDA_APP_BIN') . '/Gblocks_Linux64_0.91b/Gblocks';
$GBLOCKS_ARGV = ''; // Determined by nucl or prot
$GENE_FAMILY_TABLE = ''; // Determined by nucl or prot
$INPUT_CONFIG_PATH = $argv[1];
$INPUT_FASTA_PATH = $argv[2];
$OUTPUT_DIR = $argv[3];
$stderr_fp = fopen('php://stderr', 'a');

if($argv[4] == 'nucl')
{
	$GBLOCKS_ARGV = '-t=d -b4=5 -b5=h -e=_cln';
	//$GENE_FAMILY_TABLE = 'my_gene_family_cdna';
	$GENE_FAMILY_TABLE = 'my_gene_family'; //Identical IDs in both cDNA and protein sequences
}
else if($argv[4] == 'prot')
{
	$GBLOCKS_ARGV = '-t=p -b4=5 -b5=h -e=_cln';
	$GENE_FAMILY_TABLE = 'my_gene_family';
}
else
{
	die("Unknown type `".$argv[4]."'\n");
}

if(!file_exists($MUSCLE_PATH))
{
	die('Error: cannot find MUSCLE in `' . $MUSCLE_PATH . "': No such file or directory\n");
}
else if(!file_exists($GBLOCKS_PATH))
{
	die('Error: cannot find Gblocks in `' . $GBLOCKS_PATH . "': No such file or directory\n");
}

if(!file_exists($INPUT_CONFIG_PATH))
{
	die('Error: cannot load `' . $INPUT_CONFIG_PATH . "': No such file or directory\n");
}

echo "Loading orthoMCL config file ... ";
$dbConnectString = '';
$dbLogin = '';
$dbPassword = '';
$fp_config_file = fopen($INPUT_CONFIG_PATH, 'r');
while(!feof($fp_config_file))
{
	$line = trim(fgets($fp_config_file));
	if($line == '')  {continue;}
	if(substr($line, 0, 1) == '#')	{continue;}
	
	$arr_temp_line = explode('=', $line);
	switch($arr_temp_line[0])
	{
		case 'dbVendor':
			if(strtolower($arr_temp_line[1]) != 'mysql')
			{
				die("Error: Supporting MySQL datase only.\n");
			}
			break;
		case 'dbConnectString':
			$dbConnectString = array_pop(explode(':', $arr_temp_line[1]));
			break;
		case 'dbLogin':
			$dbLogin = $arr_temp_line[1];
			break;
		case 'dbPassword':
			$dbPassword = $arr_temp_line[1];
			break;
	}
}
fclose($fp_config_file);
echo "OK\n";

if(!file_exists($INPUT_FASTA_PATH))
{
	die('Error: cannot load `' . $INPUT_FASTA_PATH . "': No such file or directory\n");
}

echo "Loading fasta ... ";
$fasta_input = new FASTA($INPUT_FASTA_PATH);
// Remove Ensembl version ID, i.g., ENSP00000370949.3 -> ENSP00000370949
foreach($fasta_input->getAllSeqid() as $old_id)
{
	if(preg_match('/(^\w+\|ENS[A-Z]+\d+)\.\d+$/', $old_id, $m))
	$fasta_input->change_pos_map_id($old_id, $m[1]);
}

echo "OK\n";

if(!file_exists($OUTPUT_DIR))
{
	if(!mkdir($OUTPUT_DIR, 0755, true))
	{
		die("mkdir: cannot create directory `$group_dir': ".E_WARNING);
	}
}

$OUTPUT_DIR = realpath($OUTPUT_DIR);

echo "Processing sequences from gene families:\n";
$db = new DB('localhost', $dbLogin, $dbPassword, $dbConnectString, 'utf8');
$arr_my_gene_family = array();

$db->query("SELECT COUNT(DISTINCT(`species`)) FROM `$GENE_FAMILY_TABLE`");
$r = $db->fetch_row();
$num_species = (int)$r[0];

$db->query("SELECT `a`.* 
			FROM `$GENE_FAMILY_TABLE` AS `a`, 
				(SELECT `c`.`family_id` 
				FROM (SELECT `family_id`, `species` FROM `$GENE_FAMILY_TABLE` WHERE 1 GROUP BY `family_id`,`species` HAVING COUNT(*)=1) AS `c` 
				GROUP BY `c`.`family_id` 
				HAVING COUNT(*)=$num_species) AS `b` 
			WHERE `a`.`family_id`=`b`.`family_id`;");

require_once("Console/ProgressBar.php");
$bar = new Console_ProgressBar('[%bar%] %percent%', '=>', ' ', 80, $db->num_rows()/$num_species);
$bar->update(0);

for($i=1;$i<=$db->num_rows();$i++)
{
	$r = $db->fetch_assoc();
	$arr_my_gene_family[$r['family_id']][] = array('species'=>$r['species'], 'gene_id'=>$r['gene_id']);
}
//print_r($arr_my_gene_family);


$counter = 0;
foreach($arr_my_gene_family as $str_family_id=>$arr_arr_spe_gene)
{
	$group_dir = $OUTPUT_DIR.'/'.$str_family_id;
	$is_run_muscle = true;
	$is_run_gblocks = true;

	if(file_exists($group_dir))
	{
		if(file_exists($group_dir.'/muscle.ok')) {$is_run_muscle = false;}
		if(file_exists($group_dir.'/gblocks.ok')) {$is_run_gblocks = false;}
	}
	else if (!mkdir($group_dir))
	{
		die("mkdir: cannot create directory `$group_dir': ".E_WARNING);
	}
	
	chdir($group_dir);
	
	$arr_seqid_list = array();
	foreach($arr_arr_spe_gene as $arr_spe_gene)
	{
		$arr_seqid_list[] = $arr_spe_gene['species'] . '|' . $arr_spe_gene['gene_id'];
	}
	
	$created_fasta_name = $str_family_id.'.fa';
	$fasta_output = new FASTA($created_fasta_name, 'w');
	$arr_id_and_seq = $fasta_input->getSequenceBySeqid($arr_seqid_list, true);
	foreach($arr_id_and_seq as $str_seqid=>$str_seq)
	{
		$fasta_output->setSequence($str_seqid, $str_seq);
	}
	
	if(!$fasta_output->writeSequence())
	{
		die("Error: cannot write `".$str_family_id.'.fa'."'.\n");
	}
	
	if($is_run_muscle)
	{
		fwrite($stderr_fp, shell_exec($MUSCLE_PATH.' -in '.$created_fasta_name.' -out '.$str_family_id.'_ali'));
		if(file_exists($str_family_id.'_ali')) {system('touch muscle.ok');}
	}
	if($is_run_gblocks)
	{
		fwrite($stderr_fp, shell_exec($GBLOCKS_PATH.' '.$str_family_id.'_ali '.$GBLOCKS_ARGV));
		if(file_exists($str_family_id.'_ali_cln'))
		{
			system('cat '.$str_family_id."_ali_cln | sed 's/ //g' > ".$str_family_id.'_ali_cln.fasta');
			//system('mv '.$str_family_id.'_ali_cln '.$str_family_id.'_ali_cln.fasta');
		}
		
		if(file_exists($str_family_id.'_ali_cln.fasta'))
		{
			//unlink($str_family_id.'_ali_cln');
			unlink($str_family_id.'_ali_cln.htm');
			system('touch gblocks.ok');
		}
	}
	
	$bar->update(++$counter);
}

echo "\n";
fclose($stderr_fp);
echo "Done.\n";


class DB
{
	var $DB_HOST;
	var $DB_USER;
	var $DB_PASSWORD;
	var $DB_NAME;
	var $DB_LANGUAGE;
	
	var $conn;
	var $result;
	
	function DB($argDB_HOST = '127.0.0.1', $argDB_USER = '', $argDB_PASSWORD = '', $argDB_NAME = '', $argDB_Language = 'utf8')
	{
		$this->DB_HOST = $argDB_HOST;
		$this->DB_USER = $argDB_USER;
		$this->DB_PASSWORD = $argDB_PASSWORD;
		$this->DB_NAME = $argDB_NAME;
		$this->DB_LANGUAGE = $argDB_Language;
		
		$this->connect();
	}
	
	function connect()
	{
		@ $this->conn = mysql_connect($this->DB_HOST, $this->DB_USER, $this->DB_PASSWORD);
		
		if (mysql_errno())
			$this->err_msg();
		else
			mysql_select_db($this->DB_NAME, $this->conn);
			
		if (mysql_errno())
			$this->err_msg();
		else
			$this->query("SET NAMES ".$this->DB_LANGUAGE);
	}
	
	function query($argQuery)
	{
		$this->result = mysql_query($argQuery, $this->conn);
		
		if (mysql_errno())
			$this->err_msg();
	}
	
	function num_rows()
	{
		return mysql_num_rows($this->result);
	}
	
	function num_fields()
	{
		return mysql_num_fields($this->result);
	}
	
	function fetch_assoc()
	{
		return mysql_fetch_assoc($this->result);
	}
	
	function fetch_row()
	{
		return mysql_fetch_row($this->result);
	}
	
	function close()
	{
		mysql_close($this->conn);
	}
	
	function err_msg()
	{
		echo "[".mysql_errno()."]: ".mysql_error()."<br />";
		exit();
	}
	
}


class FASTA
{
	private $arr_pos_map = array();
	private $str_mode = '';
	private $str_input_seq = '';
	private $fp_fasta = NULL;
	
	function __construct($file_path='', $str_mode='r')
	{
		if($file_path)
		{
			$this->LoadFasta($file_path, $str_mode);
		}
		
		if($file_path != '' && $str_mode == 'r')
		{
			$this->init();
		}
		
	}
	
	function init()
	{
		$that = $this;
		$this->arr_pos_map = call_user_func(function() use(&$that) {
			$arr_pos_map_tmp = array();
			$line = '';
			
			while(!feof($that->getFilePointer()))
			{						
				$line = trim(fgets($that->getFilePointer()));
				if($line == '')  {continue;}
				if(substr($line, 0, 1) == '#')	{continue;}
				if(substr($line, 0, 1) == '>')
				{
					$arr_pos_map_tmp[current(explode(' ', substr($line, 1)))] = ftell($that->getFilePointer());
				}
			}
			
			fseek($that->getFilePointer(), 0, SEEK_SET);
		
			return $arr_pos_map_tmp;
		});
	}
	
	function getSequenceBySeqid($arr_input_seqid, $remove_word_wrap=false)
	{
		$arr_sequence_by_seqid = array();
		
		foreach($arr_input_seqid as $str_input_seqid)
		{
			if(isset($this->arr_pos_map[$str_input_seqid]))
			{
				$arr_sequence_by_seqid[$str_input_seqid] = '';
				fseek($this->fp_fasta, $this->arr_pos_map[$str_input_seqid], SEEK_SET);
				
				while(!feof($this->fp_fasta))
				{
					$line = fgets($this->fp_fasta);
					if($remove_word_wrap)
					{
						$line = trim($line);
					}
					
					if(substr($line, 0, 1) == '>') {
						break;
					}
					else
					{
						$arr_sequence_by_seqid[$str_input_seqid] .= $line;
					}
				}
			}
			else
			{
				$arr_sequence_by_seqid[$str_input_seqid] = '';
			}
			
		}
		fseek($this->fp_fasta, 0, SEEK_SET);
		
		return $arr_sequence_by_seqid;
	}
	
	function getAllSeqid()
	{
		return array_keys($this->arr_pos_map);
	}
	
	function setSequence($str_description, $str_seq, $int_wrap_len=60, $str_wrap_break="\n")
	{
		// Check the prefix of description
		$str_description = trim($str_description);
		if(substr($str_description, 0, 1) != '>')
		{
			$str_description = '>'.$str_description;
		}
		
		// Remove all word wrap character from a input sequence
		//$str_seq = preg_replace('/\s/', '', $str_seq);
		$str_seq = str_replace("\n", '', $str_seq);
		$str_seq = str_replace("\r", '', $str_seq);
		
		if($int_wrap_len > 0)
		{
			$str_seq = wordwrap($str_seq, $int_wrap_len, $str_wrap_break, true);
		}
		
		$this->str_input_seq .= $str_description . $str_wrap_break . $str_seq . $str_wrap_break;
	}
	
	function writeSequence()
	{
		if($this->str_mode != 'r' && $this->fp_fasta)
		{
			try
			{
				fputs($this->fp_fasta, $this->str_input_seq);
			}
			catch(Exception $e)
			{
				return false;
			}
			
			$this->str_input_seq = '';
			return true;
		}
		else
			return false;
	}
	
	function getInputSeq()
	{
		return $this->str_input_seq;
	}
	
	// Return a file pointer
	function LoadFasta($file_path, $str_mode)
	{
		if($this->fp_fasta)
		{
			fclose($this->fp_fasta);
		}
		
		$this->str_mode = $str_mode;
		
		$this->fp_fasta = call_user_func(function() use($file_path, $str_mode) {
			$f = fopen($file_path, $str_mode) or
				die('Error: cannot load `' . $file_path . "': " . E_WARNING . "\n");
			return $f;
		});
	}
		
	function getFilePointer()
	{
		return $this->fp_fasta;
	}
	
	function change_pos_map_id($old_id, $new_id)
	{
		if(isset($this->arr_pos_map[$old_id]))
		{
			$this->arr_pos_map[$new_id] = $this->arr_pos_map[$old_id];
			unset($this->arr_pos_map[$old_id]);
			
			return 1;
		}
		else
			return 0;
	}
	
	function __destruct()
	{
		if($this->fp_fasta)
		{
			fclose($this->fp_fasta);
		}
	}
}
?>
