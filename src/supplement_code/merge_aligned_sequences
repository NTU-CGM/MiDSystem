#!/usr/bin/env php
<?php
if($argc != 4)
{
        echo "Usage: merge_aligned_sequences <orthoMCL config> <INPUT DIR> <OUTPUT merged.fasta>\n";
        exit;
}

$INPUT_DIR = $argv[2];
if(!file_exists($argv[1]))
{
	die('Error: cannot load `' . $argv[1] . "': No such file or directory\n");
}
else if(!file_exists($INPUT_DIR))
{
	die('Error: cannot load `' . $INPUT_DIR . "': No such file or directory\n");
}

$NUM_OF_SPE = get_species_num($argv[1]);

$INPUT_DIR = realpath($INPUT_DIR);
$OUTPUT_FASTA_PATH = $argv[3];
$species_seq = array();
$fasta_output = new FASTA($OUTPUT_FASTA_PATH, 'w');

$arr_fasta_file_list = glob("$INPUT_DIR/*/*_ali_cln.fasta");
echo "Merging sequences ...\n";
require_once("Console/ProgressBar.php");
$bar = new Console_ProgressBar('[%bar%] %percent%', '=>', ' ', 80, count($arr_fasta_file_list));

$counter = 0;
foreach ($arr_fasta_file_list as $filename) {
    //echo "$filename size " . filesize($filename) . "\n";
	$fasta = new FASTA($filename);
	$arr_id_and_seq = $fasta->getSequenceBySeqid($fasta->getAllSeqid(), true);
	
	if(!is_seq_len_equal($arr_id_and_seq))
	{
		echo "Warning: sequences in $filename not equal!\n";
	}
	
	if(count($arr_id_and_seq) != $NUM_OF_SPE) {echo "Warning: species in $filename not equal to $NUM_OF_SPE!\n";}
	
	foreach($arr_id_and_seq as $str_seqid=>$str_seq)
	{
		$str_seq = preg_replace('/ /', '', $str_seq);
		
		if(isset($species_seq[array_shift(explode('|', $str_seqid))]))
		{
			$species_seq[array_shift(explode('|', $str_seqid))] .= $str_seq;
		}
		else
		{
			$species_seq[array_shift(explode('|', $str_seqid))] = $str_seq;
		}
	}
	
	$bar->update(++$counter);
}

echo "\n\nWriting sequences ...\n";
foreach($species_seq as $spe=>$seq)
{
	echo "species: $spe: ".strlen($seq)." bp\n";
	$fasta_output->setSequence($spe, $seq);
}
if(!$fasta_output->writeSequence())
{
	die("Error: cannot write `".$group_dir.'/'.$str_family_id.'.fa'."'.\n");
}

function is_seq_len_equal(&$arr_input)
{
	$pre_len = 0;
	$cur_len = 0;
	
	foreach($arr_input as $str_seqid=>$str_seq)
	{
		if($pre_len == 0)
		{
			$pre_len = strlen($str_seq);
			$cur_len = strlen($str_seq);
		}
		else
		{
			$cur_len = strlen($str_seq);
		}
		
		if($pre_len != $cur_len)
		{
			return 0;
		}
		else
		{
			$pre_len = $cur_len;
		}
	}
	
	return 1;
}

function get_species_num($INPUT_CONFIG_PATH)
{
	echo "Loading orthoMCL config file ... ";
	$dbConnectString = '';
	$dbLogin = '';
	$dbPassword = '';
	$fp_config_file = fopen($INPUT_CONFIG_PATH, 'r');
	while(!feof($fp_config_file))
	{
		$line = trim(fgets($fp_config_file));
		if($line == '')  {continue;}
		if(substr($line, 0, 1) == '#')	{continue;}
		
		$arr_temp_line = explode('=', $line);
		switch($arr_temp_line[0])
		{
			case 'dbVendor':
				if(strtolower($arr_temp_line[1]) != 'mysql')
				{
					die("Error: Supporting MySQL datase only.\n");
				}
				break;
			case 'dbConnectString':
				$dbConnectString = array_pop(explode(':', $arr_temp_line[1]));
				break;
			case 'dbLogin':
				$dbLogin = $arr_temp_line[1];
				break;
			case 'dbPassword':
				$dbPassword = $arr_temp_line[1];
				break;
		}
	}
	fclose($fp_config_file);
	echo "OK\n";
	
	$db = new DB('localhost', $dbLogin, $dbPassword, $dbConnectString, 'utf8');
	$arr_my_gene_family = array();
	$TABLE_NAME = 'my_gene_family';

	$db->query("SELECT COUNT(DISTINCT(`species`)) FROM `$TABLE_NAME`");
	$r = $db->fetch_row();
	return((int)$r[0]);
}


class DB
{
	var $DB_HOST;
	var $DB_USER;
	var $DB_PASSWORD;
	var $DB_NAME;
	var $DB_LANGUAGE;
	
	var $conn;
	var $result;
	
	function DB($argDB_HOST = '127.0.0.1', $argDB_USER = '', $argDB_PASSWORD = '', $argDB_NAME = '', $argDB_Language = 'utf8')
	{
		$this->DB_HOST = $argDB_HOST;
		$this->DB_USER = $argDB_USER;
		$this->DB_PASSWORD = $argDB_PASSWORD;
		$this->DB_NAME = $argDB_NAME;
		$this->DB_LANGUAGE = $argDB_Language;
		
		$this->connect();
	}
	
	function connect()
	{
		@ $this->conn = mysql_connect($this->DB_HOST, $this->DB_USER, $this->DB_PASSWORD);
		
		if (mysql_errno())
			$this->err_msg();
		else
			mysql_select_db($this->DB_NAME, $this->conn);
			
		if (mysql_errno())
			$this->err_msg();
		else
			$this->query("SET NAMES ".$this->DB_LANGUAGE);
	}
	
	function query($argQuery)
	{
		$this->result = mysql_query($argQuery, $this->conn);
		
		if (mysql_errno())
			$this->err_msg();
	}
	
	function num_rows()
	{
		return mysql_num_rows($this->result);
	}
	
	function num_fields()
	{
		return mysql_num_fields($this->result);
	}
	
	function fetch_assoc()
	{
		return mysql_fetch_assoc($this->result);
	}
	
	function fetch_row()
	{
		return mysql_fetch_row($this->result);
	}
	
	function close()
	{
		mysql_close($this->conn);
	}
	
	function err_msg()
	{
		echo "[".mysql_errno()."]: ".mysql_error()."<br />";
		exit();
	}
	
}


class FASTA
{
	private $arr_pos_map = array();
	private $str_mode = '';
	private $str_input_seq = '';
	private $fp_fasta = NULL;
	
	function __construct($file_path='', $str_mode='r')
	{
		if($file_path)
		{
			$this->LoadFasta($file_path, $str_mode);
		}
		
		if($file_path != '' && $str_mode == 'r')
		{
			$this->init();
		}
		
	}
	
	function init()
	{
		$that = $this;
		$this->arr_pos_map = call_user_func(function() use(&$that) {
			$arr_pos_map_tmp = array();
			$line = '';
			
			while(!feof($that->getFilePointer()))
			{						
				$line = trim(fgets($that->getFilePointer()));
				if($line == '')  {continue;}
				if(substr($line, 0, 1) == '#')	{continue;}
				if(substr($line, 0, 1) == '>')
				{
					$arr_pos_map_tmp[current(explode(' ', substr($line, 1)))] = ftell($that->getFilePointer());
				}
			}
			
			fseek($that->getFilePointer(), 0, SEEK_SET);
		
			return $arr_pos_map_tmp;
		});
	}
	
	function getSequenceBySeqid($arr_input_seqid, $remove_word_wrap=false)
	{
		$arr_sequence_by_seqid = array();
		
		foreach($arr_input_seqid as $str_input_seqid)
		{
			if(isset($this->arr_pos_map[$str_input_seqid]))
			{
				$arr_sequence_by_seqid[$str_input_seqid] = '';
				fseek($this->fp_fasta, $this->arr_pos_map[$str_input_seqid], SEEK_SET);
				
				while(!feof($this->fp_fasta))
				{
					$line = fgets($this->fp_fasta);
					if($remove_word_wrap)
					{
						$line = trim($line);
					}
					
					if(substr($line, 0, 1) == '>') {
						break;
					}
					else
					{
						$arr_sequence_by_seqid[$str_input_seqid] .= $line;
					}
				}
			}
			else
			{
				$arr_sequence_by_seqid[$str_input_seqid] = '';
			}
			
		}
		fseek($this->fp_fasta, 0, SEEK_SET);
		
		return $arr_sequence_by_seqid;
	}
	
	function getAllSeqid()
	{
		return array_keys($this->arr_pos_map);
	}
	
	function setSequence($str_description, $str_seq, $int_wrap_len=60, $str_wrap_break="\n")
	{
		// Check the prefix of description
		$str_description = trim($str_description);
		if(substr($str_description, 0, 1) != '>')
		{
			$str_description = '>'.$str_description;
		}
		
		// Remove all word wrap character from a input sequence
		//$str_seq = preg_replace('/\s/', '', $str_seq);
		$str_seq = str_replace("\n", '', $str_seq);
		$str_seq = str_replace("\r", '', $str_seq);
		
		if($int_wrap_len > 0)
		{
			$str_seq = wordwrap($str_seq, $int_wrap_len, $str_wrap_break, true);
		}
		
		$this->str_input_seq .= $str_description . $str_wrap_break . $str_seq . $str_wrap_break;
	}
	
	function writeSequence()
	{
		if($this->str_mode != 'r' && $this->fp_fasta)
		{
			try
			{
				fputs($this->fp_fasta, $this->str_input_seq);
			}
			catch(Exception $e)
			{
				return false;
			}
			
			$this->str_input_seq = '';
			return true;
		}
		else
			return false;
	}
	
	function getInputSeq()
	{
		return $this->str_input_seq;
	}
	
	// Return a file pointer
	function LoadFasta($file_path, $str_mode)
	{
		if($this->fp_fasta)
		{
			fclose($this->fp_fasta);
		}
		
		$this->str_mode = $str_mode;
		
		$this->fp_fasta = call_user_func(function() use($file_path, $str_mode) {
			$f = fopen($file_path, $str_mode) or
				die('Error: cannot load `' . $file_path . "': " . E_WARNING . "\n");
			return $f;
		});
	}
		
	function getFilePointer()
	{
		return $this->fp_fasta;
	}
	
	function change_pos_map_id($old_id, $new_id)
	{
		if(isset($this->arr_pos_map[$old_id]))
		{
			$this->arr_pos_map[$new_id] = $this->arr_pos_map[$old_id];
			unset($this->arr_pos_map[$old_id]);
			
			return 1;
		}
		else
			return 0;
	}
	
	function __destruct()
	{
		if($this->fp_fasta)
		{
			fclose($this->fp_fasta);
		}
	}
}

?>
